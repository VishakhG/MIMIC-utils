import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression 
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier 
from metric_learn  import LMNN
from metric_learn import NCA
from sklearn.model_selection import GridSearchCV
import os

#EASY TOGGLES:
test_script = False

print("Loading Data")
data_path = "/data/ml2/vishakh/mimic_mortalitypred_data"

sparse_path = os.path.join(data_path, "sparse_outlier_free.csv")
tfidf_path = os.path.join(data_path, "tfidf_features.npy") 
mortality_path = os.path.join(data_path, "mortality_labels.csv")
#TODO vae_path =


if not test_script:
    print("Using real data")
    sparse_data = np.array(pd.read_csv(sparse_path))
    tfidf_data = np.array(pd.read_csv(tfidf_path))
    mortality_targets = np.array(pd.read_csv(tfidf_path))
    #TODO vae_data =

else:
    print("Using simulated data")
    sparse_data = tfidf_data =  np.random.rand(10,10)
    mortality_targets = np.array([np.random.randint(0, high=2) for i in range(10)])

dataset_collection = [sparse_data, tfidf_data]    

file_out_names = ["predacc_raw.csv", "predacc_tfidf.csv"]

print("Begin the loop")


for d in range(len(dataset_collection)):
    print("Starting loop for" + file_out_names[d][1:-3])
    data = dataset_collection[d]
    
    round_out = dict.fromkeys([
        "logistic_regression", "nearest_neighbor",
        "random_foreset", "metric_learning"])
    print("Logistic Regression")

    lr = LogisticRegression()
    lr_params = {'max_iter' : range(100,1000)}
    lr_clf = GridSearchCV(lr, lr_params)

    lr_clf.fit(data, mortality_targets)

    round_out["logistic_regression"] = lr_clf.best_score_

    print("Random Forest")
    rf = RandomForestClassifier()
    rf_params = {'criterion':('gini', 'entropy')}

    rf_clf = GridSearchCV(rf, rf_params)

    rf_clf.fit(data, mortality_targets)
    
    round_out["random_forest"] = rf_clf.best_score_

    print("Nearest Neighbors")
    nn = KNeighborsClassifier()
    nn_params = {"n_neighbors" : range(5, max(6, len(data)/10)), 'leaf_size':range(30,100)}

    nn_clf = GridSearchCV(nn, nn_params)

    nn_clf.fit(data, mortality_targets)

    round_out["nearest_neighbors"] = nn_clf.best_score_

    print("Metric learning")
    nca = NCA(max_iter=1000, learning_rate=0.01)
    nca.fit(data, np.array(mortality_targets)) 
    transformed = nca.transform()

    nn_metric = KNeighborsClassifier()
    nn_metric_params = {"n_neighbors" : range(5, max(6, len(data)/10)), 'leaf_size':range(30,100)}

    nn_metric_clf = GridSearchCV(nn, nn_params)

    nn_metric_clf.fit(transformed, mortality_targets)

    round_out["metric_learning"] = nn_metric_clf.best_score_
    round_out = pd.DataFrame([round_out])
    round_out.to_csv(os.path.join(data_path,file_out_names[d]))

    
